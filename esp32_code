#include <WiFi.h>
#include <PubSubClient.h>
#include "DHT.h"
#include <ArduinoJson.h> // Thêm thư viện ArduinoJson

// Định nghĩa chân kết nối cho cảm biến DHT11 và cảm biến ánh sáng
#define DHTPIN 4          // Chân GPIO cho DHT11
#define DHTTYPE DHT11     // Loại cảm biến DHT (DHT11)
#define LED_PIN1 26       // Chân GPIO cho đèn LED 1
#define LED_PIN2 27       // Chân GPIO cho đèn LED 2
#define LED_PIN3 14       // Chân GPIO cho đèn LED 3
#define LED_PIN4 32       // Chân GPIO cho đèn LED 3
#define LED_PIN5 35       // Chân GPIO cho đèn LED 3
#define LIGHT_SENSOR_PIN 34 // Chân GPIO cho cảm biến ánh sáng (AO)

const char* ssid = "TungHau"; // Thay bằng SSID WiFi của bạn
const char* password = "24111996"; // Thay bằng mật khẩu WiFi của bạn

// Thông tin MQTT
const char* mqttServer = "192.168.100.218"; // Địa chỉ broker MQTT
const int mqttPort = 1885; // Cổng của broker MQTT
const char* mqttUser = "lexuanmanh"; // Thêm username MQTT
const char* mqttPass = "b21dcat125"; // Thêm password MQTT
const char* mqttTopicPublish = "esp32/sensorData"; // Topic để publish dữ liệu DHT và ánh sáng

// Các topic để subscribe điều khiển đèn LED
const char* mqttTopicSubscribe1 = "esp32/led1"; // Topic để điều khiển LED 1
const char* mqttTopicSubscribe2 = "esp32/led2"; // Topic để điều khiển LED 2
const char* mqttTopicSubscribe3 = "esp32/led3"; // Topic để điều khiển LED 3
const char* mqttTopicSubscribe4 = "esp32/led4"; // Topic để điều khiển LED 4
const char* mqttTopicSubscribe5 = "esp32/led5"; // Topic để điều khiển LED 5
const char* mqttTopicSubscribeAll = "esp32/all_leds"; // Topic để điều khiển tất cả đèn LED

DHT dht(DHTPIN, DHTTYPE);
WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  delay(2000); // Đợi hệ thống ổn định
  dht.begin();
  
  pinMode(LED_PIN1, OUTPUT); // Thiết lập chân GPIO 26 là đầu ra
  pinMode(LED_PIN2, OUTPUT); // Thiết lập chân GPIO 27 là đầu ra
  pinMode(LED_PIN3, OUTPUT); // Thiết lập chân GPIO 14 là đầu ra
  pinMode(LED_PIN4, OUTPUT); // Thiết lập chân GPIO 32 là đầu ra
  pinMode(LED_PIN5, OUTPUT); // Thiết lập chân GPIO 35 là đầu ra
  digitalWrite(LED_PIN1, LOW); // Đảm bảo LED 1 tắt ở trạng thái khởi động
  digitalWrite(LED_PIN2, LOW); // Đảm bảo LED 2 tắt ở trạng thái khởi động
  digitalWrite(LED_PIN3, LOW); // Đảm bảo LED 3 tắt ở trạng thái khởi động
  digitalWrite(LED_PIN4, LOW); // Đảm bảo LED 3 tắt ở trạng thái khởi động
  digitalWrite(LED_PIN5, LOW); // Đảm bảo LED 3 tắt ở trạng thái khởi động
  Serial.println("LED control and light sensor initialized...");
  
  // Kết nối đến WiFi
  setupWiFi();
  
  // Thiết lập broker MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(mqttCallback);
}

void setupWiFi() {
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println(" Connected to WiFi!");
}

void mqttCallback(char* topic, byte* message, unsigned int length) {
  String incomingMessage; 
  for (int i = 0; i < length; i++) {
    incomingMessage += (char)message[i];
  }
  
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  Serial.println(incomingMessage);
  
  // Kiểm tra xem có yêu cầu điều khiển đèn LED nào không
  if (String(topic) == mqttTopicSubscribe1) {
    if (incomingMessage == "ON") {
      // delay(3000);
      digitalWrite(LED_PIN1, HIGH); // Bật đèn LED 1
      Serial.println("LED 1 turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN1, LOW); // Tắt đèn LED 1
      Serial.println("LED 1 turned OFF by MQTT command");
    }
  }
  else if (String(topic) == mqttTopicSubscribe2) {
    if (incomingMessage == "ON") {
      // delay(3000);
      digitalWrite(LED_PIN2, HIGH); // Bật đèn LED 2
      Serial.println("LED 2 turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN2, LOW); // Tắt đèn LED 2
      Serial.println("LED 2 turned OFF by MQTT command");
    }
  }
  else if (String(topic) == mqttTopicSubscribe3) {
    if (incomingMessage == "ON") {
      // delay(3000);
      digitalWrite(LED_PIN3, HIGH); // Bật đèn LED 3
      Serial.println("LED 3 turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN3, LOW); // Tắt đèn LED 3
      Serial.println("LED 3 turned OFF by MQTT command");
    }
  }

  else if (String(topic) == mqttTopicSubscribe4) {
    if (incomingMessage == "ON") {
      // delay(3000);
      digitalWrite(LED_PIN4, HIGH); // Bật đèn LED 4
      Serial.println("LED 4 turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN4, LOW); // Tắt đèn LED 4
      Serial.println("LED 4 turned OFF by MQTT command");
    }
  }

  else if (String(topic) == mqttTopicSubscribe3) {
    if (incomingMessage == "ON") {
      // delay(3000);
      digitalWrite(LED_PIN5, HIGH); // Bật đèn LED 5
      Serial.println("LED 5 turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN5, LOW); // Tắt đèn LED 5
      Serial.println("LED 5 turned OFF by MQTT command");
    }
  }
  // Điều khiển cả 3 đèn cùng lúc
  else if (String(topic) == mqttTopicSubscribeAll) {
    if (incomingMessage == "ON") {
      digitalWrite(LED_PIN1, HIGH); // Bật đèn LED 1
      digitalWrite(LED_PIN2, HIGH); // Bật đèn LED 2
      digitalWrite(LED_PIN3, HIGH); // Bật đèn LED 3
      digitalWrite(LED_PIN4, HIGH); // Bật đèn LED 3
      digitalWrite(LED_PIN5, HIGH); // Bật đèn LED 3
      Serial.println("All LEDs turned ON by MQTT command");
    } else if (incomingMessage == "OFF") {
      digitalWrite(LED_PIN1, LOW); // Tắt đèn LED 1
      digitalWrite(LED_PIN2, LOW); // Tắt đèn LED 2
      digitalWrite(LED_PIN3, LOW); // Tắt đèn LED 3
      digitalWrite(LED_PIN4, LOW); // Tắt đèn LED 4
      digitalWrite(LED_PIN5, LOW); // Tắt đèn LED 5
      Serial.println("All LEDs turned OFF by MQTT command");
    }
  }
}

void loop() {
  // Kết nối MQTT
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  // Đọc giá trị từ DHT11
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  
  // Kiểm tra xem có lỗi khi đọc cảm biến không
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
  } else {
    // Tạo một đối tượng JSON
    StaticJsonDocument<200> doc;
    doc["humidity"] = h;
    doc["temperature"] = t;

    // Đọc giá trị từ cảm biến ánh sáng (AO)
    int lightSensorValue = analogRead(LIGHT_SENSOR_PIN); // Đọc tín hiệu từ AO của cảm biến ánh sáng

    // Đảo ngược giá trị cảm biến ánh sáng
    int invertedLightValue = 4095 - lightSensorValue; // Đảo ngược giá trị (4095 là giá trị tối đa)

    doc["light"] = invertedLightValue; // Gán giá trị đảo ngược vào JSON

    // Serialize JSON
    String jsonString;
    serializeJson(doc, jsonString);
    
    // In ra chuỗi JSON trên Serial Monitor
    Serial.println(jsonString); 

    // Publish dữ liệu qua MQTT
    client.publish(mqttTopicPublish, jsonString.c_str());
  }
  
  delay(3000); // Đợi 3 giây trước khi đọc lại
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Nếu kết nối thành công, subscribe vào các topic điều khiển LED
    if (client.connect("ESP32Client")) {
      Serial.println(" connected");
      client.subscribe(mqttTopicSubscribe1); // Subscribe vào topic điều khiển LED 1
      client.subscribe(mqttTopicSubscribe2); // Subscribe vào topic điều khiển LED 2
      client.subscribe(mqttTopicSubscribe3); // Subscribe vào topic điều khiển LED 3
      client.subscribe(mqttTopicSubscribe4); // Subscribe vào topic điều khiển LED 3
      client.subscribe(mqttTopicSubscribe5); // Subscribe vào topic điều khiển LED 3
      client.subscribe(mqttTopicSubscribeAll); // Subscribe vào topic điều khiển tất cả LED

    } else {
      Serial.print(" failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(2000);
    }
  }
}
